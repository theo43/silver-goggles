version: '3.8'

services:
  mongodb:
    image: mongo:latest
    container_name: mongodb_sg
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=db_sg
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=password  
    volumes:
      - mongo_data:/data/db
      - ./database/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    networks:
      - application-network
  
  authentication:
    build:
      context: ./authentication
      dockerfile: Dockerfile
    container_name: authentication_api
    ports:
      - "8080:8080"
    networks:
      - application-network
    environment:
      - SECRET_KEY=_picks_and_shovels

  data_ingestion:
    build:
      context: data_ingestion/
      dockerfile: Dockerfile
    container_name: data_ingestion_api
    ports:
      - "8081:8081"
    depends_on:
      - mongodb
      - authentication
    networks:
      - application-network
    environment:
      - DATABASE_NAME=db_sg
      - MONGO_URI=mongodb://root:password@mongodb_sg:27017/
      - SECRET_KEY=_picks_and_shovels
  
  inference:
    build:
      context: inference/
      dockerfile: Dockerfile
    container_name: inference_api
    ports:
      - "8082:8082"
    depends_on:
      - mongodb
      - authentication
    networks:
      - application-network
    environment:
      - DATABASE_NAME=db_sg
      - MONGO_URI=mongodb://root:password@mongodb_sg:27017/
      - PRED_COLLECTION_NAME=predictions
      - SECRET_KEY=_picks_and_shovels
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    
  feedback_loop:
    build:
      context: ./feedback_loop
      dockerfile: Dockerfile
    container_name: feedback_loop_api
    ports:
      - "8083:8083"
    depends_on:
      - mongodb
    networks:
      - application-network
    environment:
      - DATABASE_NAME=db_sg
      - MONGO_URI=mongodb://root:password@mongodb_sg:27017/
      - PRED_COLLECTION_NAME=predictions
      - SECRET_KEY=_picks_and_shovels

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - application-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - application-network
    volumes:
      - grafana_data:/var/lib/grafana
  
  mlflow:
    image: ghcr.io/mlflow/mlflow
    container_name: mlflow
    ports:
      - "5001:5000"
    command: mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri sqlite:///mlflow.db --default-artifact-root /mlflow/artifacts
    networks:
      - application-network
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
      - mlflow_data:/mlflow

volumes:
  mongo_data:
    driver: local
  grafana_data:
    driver: local
  mlflow_artifacts:
    driver: local
  mlflow_data:
    driver: local

networks:
  application-network:
    driver: bridge